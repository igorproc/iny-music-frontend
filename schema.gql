# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Response for update avatar"""
type UpdateUserAvatarOutput {
  avatarPath: String!
}

"""User"""
type UserModel {
  uid: ID
  username: String
  gender: UserGender
  birthday: Int
  phone: String
  avatarUrl: String
  email: String
  role: UserRole
}

enum UserGender {
  male
  female
}

enum UserRole {
  user
  author
  admin
  label
  manager
}

"""Device"""
type DeviceModel {
  clientId: String
}

"""Atrist"""
type ArtistModel {
  aid: ID!
  owner_uid: Int!
  name: String!
  surname: String!
  alt_name: String
  verify: Boolean!
  avatar_id: Int
  updated_at: Int!
  created_at: Int!
}

"""Genre"""
type GenreModel {
  gid: ID!
  title: String!
}

type ArtistOutputforSong {
  id: ID!
  altName: String!
  artistImage: String!
  shareToken: String!
}

type FeatOutputforSong {
  name: String
  position: Int
}

type SongDataFragment {
  artist: ArtistOutputforSong!
  genres: [String!]!
  feats: [FeatOutputforSong!]!
  title: String!
  subtitle: String
  explicit: Boolean!
  duration: Int!
  songUrl: String
}

type AlbumData {
  typename: String!
  artist: ArtistOutputforSong
  title: String
  subtitle: String
  shareToken: String
  albumLogo: String
  songs: [SongDataFragment!]!
  createdAt: Int
}

type Query {
  """Find User By uid"""
  getUserByUid(id: Int!): UserModel!

  """Get All Genres List"""
  getAllGenreList: [GenreModel!]!

  """get album data"""
  getAlbumByShareToken(shareToken: String!): AlbumData!
}

type Mutation {
  """create a new user"""
  createUser(userData: RegisterUser!, clientId: String!): UserModel

  """login user"""
  loginUser(loginData: UserLogin!): UserModel!

  """logout user"""
  logoutUser(logoutData: UserLogout!): Boolean!

  """Update user avatar"""
  updateUserAvatar(updateAvatarData: UpdateUserAvatar!): UpdateUserAvatarOutput!

  """Declarate a new device"""
  createUserDevice(deviceData: NewDeviceInput!): DeviceModel

  """create an artist"""
  createArtist(artistInput: CreateArtistInput!): ArtistModel!

  """Fill genres into db"""
  fillGenresList: Boolean!

  """add new album (only artist)"""
  createNewAlbum(albumData: NewAlbumModel!): String

  """upload song with album connect"""
  uploadSong(playlistContentData: NewPlaylistContentData!): Int!
}

"""input for register user"""
input RegisterUser {
  email: String!
  password: String!
  name: String!
  surname: String!
  gender: String!
  birthday: Int!
  phone: String!
}

"""input for login user"""
input UserLogin {
  email: String!
  password: String!
}

"""input for logout user"""
input UserLogout {
  uid: Int!
  clientId: String!
}

"""Data for update a avatar file"""
input UpdateUserAvatar {
  userId: Int!
  avatarFile: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""device data input"""
input NewDeviceInput {
  appId: Int!
  platform: String!
}

"""Atrist model"""
input CreateArtistInput {
  ownerUid: Int!
  name: String!
  surname: String!
  altName: String
  avatarFile: Upload
}

input NewAlbumModel {
  uid: Int!
  aid: Int!
  title: String!
  subtitle: String
  albumImage: Upload!
  featIds: [Int!]
  plalistContentIds: [Int!]!
}

input NewPlaylistContentData {
  uid: Int!
  song: NewSongFragment!
}

input NewSongFragment {
  aid: Int!
  genresIds: [Int!]!
  ownerUid: Int!
  title: String!
  subtitle: String
  explicit: Boolean!
  featIds: [Int!]
  duration: Int!
  songFile: Upload
}